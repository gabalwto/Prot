CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

PROJECT (LIBPROT)

OPTION(BUILD_STATIC_LIB "Compile static library or not" ON)
OPTION(BUILD_STANDALONE "Compile each folder a library" ON)
OPTION(BUILD_UNITTEST "Compile unittest targets" ON)
OPTION(BUILD_XPCOMPAT "Compile unittest targets" OFF)
OPTION(BUILD_TWOPACK "Compile unittest targets" OFF)

FOREACH (flag_var
	CMAKE_C_FLAGS
	CMAKE_C_FLAGS_DEBUG
	CMAKE_C_FLAGS_RELEASE
	CMAKE_C_FLAGS_RELWITHDEBINFO
	CMAKE_C_FLAGS_MINSIZEREL
	CMAKE_CXX_FLAGS
	CMAKE_CXX_FLAGS_DEBUG
	CMAKE_CXX_FLAGS_RELEASE
	CMAKE_CXX_FLAGS_MINSIZEREL
	CMAKE_CXX_FLAGS_RELWITHDEBINFO
	)
  IF(NOT BUILD_SHARED_LIBS)
	STRING(REPLACE "/MD" "/MT" ${flag_var} "${${flag_var}}")
  ENDIF()
  STRING(REPLACE "/W3" "/W0" ${flag_var} "${${flag_var}}")
ENDFOREACH()

IF (BUILD_XPCOMPAT AND MSVC AND 1750 LESS MSVC_VERSION)
  MESSAGE(STATUS "Use XP Compat Build !")
  IF (CMAKE_CL_64)
	SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /SUBSYSTEM:CONSOLE,5.02")
  ELSE()
	SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /SUBSYSTEM:CONSOLE,5.01")
  ENDIF()
ENDIF()


IF (BUILD_TWOPACK AND NOT BUILD_TWOPACK_NAME)
  IF(MSVC)
	IF(CMAKE_CL_64)
	  SET(BUILD_TWOPACK_NAME "win64")
	ELSE(CMAKE_CL_64)
	  SET(BUILD_TWOPACK_NAME "win32")
	ENDIF(CMAKE_CL_64)
  ELSE(MSVC)
	IF (CMAKE_SIZEOF_VOID_P EQUAL 8)
	  SET(BUILD_TWOPACK_NAME "x86_64")
	ELSEIF (CMAKE_SIZEOF_VOID_P EQUAL 4)
	  SET(BUILD_TWOPACK_NAME "i686")
	ELSE()
	  SET(BUILD_TWOPACK_NAME "_UMA_")
	ENDIF()
  ENDIF(MSVC)
ENDIF(BUILD_TWOPACK AND NOT BUILD_TWOPACK_NAME)

SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}
CACHE PATH "Single directory for all executable and dynamic libraries on Windows.")
MARK_AS_ADVANCED(CMAKE_RUNTIME_OUTPUT_DIRECTORY)
ENABLE_TESTING()
#ENABLE_LANGUAGE(CXX)
SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)
IF (NOT CMAKE_BUILD_TYPE)
SET(CMAKE_BUILD_TYPE Debug)
ENDIF()
IF (CMAKE_BUILD_TYPE STREQUAL "Debug")
ADD_DEFINITIONS(-D__PROT_BUILD_DEBUG_)
ENDIF()

INCLUDE_DIRECTORIES(
${CMAKE_CURRENT_SOURCE_DIR}
${CMAKE_CURRENT_SOURCE_DIR}/base
)
IF (NOT BUILD_STANDALONE)
IF(NOT BUILD_TWOPACK)
FILE(GLOB_RECURSE PROT_LIBRARY_SRCS "." "*.cc")
MESSAGE(STATUS "=== LIST all source Files ===")
FOREACH(srcfile ${PROT_LIBRARY_SRCS})
  MESSAGE(STATUS "${srcfile}")
ENDFOREACH()
MESSAGE(STATUS "-----------------------------")
ADD_LIBRARY(prot STATIC ${PROT_LIBRARY_SRCS})
IF(NOT WIN32)
SET(PROT_LIBRARY_LIBS
rt
pthread
)
TARGET_LINK_LIBRARIES(prot ${PROT_LIBRARY_LIBS})
ENDIF()
SET_TARGET_PROPERTIES(prot PROPERTIES FOLDER "All")
INSTALL(TARGETS prot DESTINATION "lib")
ENDIF(NOT BUILD_TWOPACK)
ENDIF (NOT BUILD_STANDALONE)

FILE(GLOB_RECURSE PROT_LIBRARY_HDRS "${CMAKE_CURRENT_SOURCE_DIR}" "*.hh")
SET(PROTGEN_HEADFILE "${PROJECT_BINARY_DIR}/prot.h")
FILE(WRITE "${PROTGEN_HEADFILE}" "#ifndef __PROT_LIBRARY_ALL_H_\n#define __PROT_LIBRARY_ALL_H_\n\n")
MESSAGE(STATUS "=== LIST all header Files ===")
FOREACH(hhfile ${PROT_LIBRARY_HDRS})
  # STRING(REPLACE "${CMAKE_CURRENT_SOURCE_DIR}/" "" hhrfile ${hhfile})
  FILE(RELATIVE_PATH hhrfile "${CMAKE_CURRENT_SOURCE_DIR}" "${hhfile}")
  # STRING(REGEX REPLACE ".*\\/([^/]+\\.hh)" "\\1" hhrdir ${hhrfile})
  GET_FILENAME_COMPONENT(hhrdir "${hhrfile}" DIRECTORY)
  MESSAGE(STATUS "${hhfile} --> include/${hhrdir}")
  INSTALL(FILES "${hhfile}" DESTINATION "include/${hhrdir}")
  FILE(APPEND "${PROTGEN_HEADFILE}" "#include <${hhrfile}>\n")
ENDFOREACH()
FILE(APPEND "${PROTGEN_HEADFILE}" "\n#endif\n")
INSTALL(FILES "${PROTGEN_HEADFILE}" DESTINATION "include")

MESSAGE(STATUS "-----------------------------")

OPTION(BUILD_NOTEMPLATE "Compile with no template, just for test" OFF)
IF (BUILD_NOTEMPLATE)
ADD_DEFINITIONS(-DNOPTEMPLATE)
MESSAGE(STATUS "*** You select a test build mode for no templates")
ELSE ()
MESSAGE(STATUS "BUILD TEMPLATES ON")
ENDIF ()

IF (BUILD_UNITTEST)
SET(UNITTEST_LIBS ptutest ptutest_main)
ENDIF(BUILD_UNITTEST)
INCLUDE(test/testing.cmake)

IF(NOT BUILD_TWOPACK)
ADD_SUBDIRECTORY(base)
ADD_SUBDIRECTORY(struct)
ADD_SUBDIRECTORY(system)
ELSE(NOT BUILD_TWOPACK)
IF(WIN32)
SET(TWOPACKLIBNAME "prot.lib")
SET(TWOPACKLIBEXT ".lib")
ELSE(WIN32)
SET(TWOPACKLIBNAME "libprot.a")
SET(TWOPACKLIBEXT ".a")
ENDIF(WIN32)
MESSAGE(STATUS "PROJECT_BINARY_DIR = ${PROJECT_BINARY_DIR}")
FIND_PATH(DEBUG_LIBDIR "${TWOPACKLIBNAME}" HINTS "${PROJECT_BINARY_DIR}/Debug")
MESSAGE(STATUS "DEBUG_LIBDIR : ${DEBUG_LIBDIR}")
IF(DEBUG_LIBDIR)
  FILE(GLOB DEBUG_DIRLIBS "${DEBUG_LIBDIR}/*${TWOPACKLIBEXT}")
  FOREACH(lib_file ${DEBUG_DIRLIBS})
    MESSAGE(STATUS "lib_file : ${lib_file}")
    INSTALL(FILES "${lib_file}" DESTINATION "lib/Debug")
  ENDFOREACH()
ENDIF(DEBUG_LIBDIR)
FIND_PATH(RELEASE_LIBDIR "${TWOPACKLIBNAME}" HINTS "${PROJECT_BINARY_DIR}/Release")
MESSAGE(STATUS "RELEASE_LIBDIR : ${RELEASE_LIBDIR}")
IF(RELEASE_LIBDIR)
  FILE(GLOB RELEASE_DIRLIBS "${RELEASE_LIBDIR}/*${TWOPACKLIBEXT}")
  FOREACH(lib_file ${RELEASE_DIRLIBS})
    MESSAGE(STATUS "lib_file : ${lib_file}")
    INSTALL(FILES "${lib_file}" DESTINATION "lib/Release")
  ENDFOREACH()
ENDIF(RELEASE_LIBDIR)
ENDIF(NOT BUILD_TWOPACK)

SET(CPACK_PACKAGE_VERSION_MAJOR "1")
SET(CPACK_PACKAGE_VERSION_MINOR "0")
SET(CPACK_PACKAGE_VERSION_PATCH "0")
SET(CPACK_PACKAGE_VERSION "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")

##################################################
SET(CPACK_PACKAGE_NAME "prot")
# INSTALL(FILES "README.txt" DESTINATION ".")
# IF (NOT WIN32)
# INSTALL(FILES "Install.sh" DESTINATION "."
  # PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ
              # GROUP_EXECUTE GROUP_READ
              # WORLD_EXECUTE WORLD_READ)
# ENDIF (NOT WIN32)

# INCLUDE(InstallRequiredSystemLibraries)

IF (WIN32)
  SET(CPACK_GENERATOR "ZIP")
  IF (BUILD_TWOPACK)
	SET(CPACK_SYSTEM_NAME "${BUILD_TWOPACK_NAME}")
  ELSE (BUILD_TWOPACK)
	IF (CMAKE_CL_64)
	  SET(CPACK_SYSTEM_NAME "win64")
	ELSE(CMAKE_CL_64)
	  SET(CPACK_SYSTEM_NAME "win32")
	ENDIF(CMAKE_CL_64)
  ENDIF (BUILD_TWOPACK)
ELSE(WIN32)
  SET(CPACK_GENERATOR "TGZ")
  IF (BUILD_TWOPACK)
  	SET(CPACK_SYSTEM_NAME "${BUILD_TWOPACK_NAME}")
  ELSE(BUILD_TWOPACK)
  	SET(CPACK_SYSTEM_NAME "linux")
  ENDIF(BUILD_TWOPACK)
ENDIF(WIN32)

SET(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_SYSTEM_NAME}")
IF (NOT BUILD_TWOPACK AND CMAKE_BUILD_TYPE STREQUAL "Debug")
SET(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_FILE_NAME}-dbg")
ENDIF()

INCLUDE(CPack)

